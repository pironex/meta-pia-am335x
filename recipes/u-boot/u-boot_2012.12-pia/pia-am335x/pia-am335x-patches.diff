diff --git a/arch/arm/cpu/armv7/am33xx/board.c b/arch/arm/cpu/armv7/am33xx/board.c
index 7a34037..85a6674 100644
--- a/arch/arm/cpu/armv7/am33xx/board.c
+++ b/arch/arm/cpu/armv7/am33xx/board.c
@@ -65,7 +65,7 @@ const struct gpio_bank *const omap_gpio_bank = gpio_bank_am33xx;
 
 static struct ctrl_dev *cdev = (struct ctrl_dev *)CTRL_DEVICE_BASE;
 
-static struct am335x_baseboard_id __attribute__((section (".data"))) header;
+struct am335x_baseboard_id __attribute__((section (".data"))) header;
 
 static inline int board_is_bone(void)
 {
@@ -77,17 +77,30 @@ static inline int board_is_evm_sk(void)
 	return !strncmp("A335X_SK", header.name, HDR_NAME_LEN);
 }
 
+static inline int board_is_pia(void)
+{
+	debug("name:%8s\n", header.name);
+	return !strncmp(header.name, "PIA335", 6);
+}
+
 int board_is_evm_15_or_later(void)
 {
 	return (!strncmp("A33515BB", header.name, 8) &&
 			strncmp("1.5", header.version, 3) <= 0);
 }
 
+int __attribute__((weak)) am33xx_first_start(void)
+{
+	return 0;
+}
+
 /*
  * Read header information from EEPROM into global structure.
  */
 static int read_eeprom(void)
 {
+	int i;
+	debug(">>spl:read_eeprom()\n");
 	/* Check if baseboard eeprom is available */
 	if (i2c_probe(CONFIG_SYS_I2C_EEPROM_ADDR)) {
 		puts("Could not probe the EEPROM; something fundamentally "
@@ -115,12 +128,21 @@ static int read_eeprom(void)
 			return -EIO;
 		}
 
+		if (header.magic != 0xEE3355AA || header.config[31] != 0) {
+			if (am33xx_first_start()) {
+				puts("Could not initialize EEPROM.\n");
+				return -EIO;
+			}
+		}
+
 		if (header.magic != 0xEE3355AA) {
 			printf("Incorrect magic number (0x%x) in EEPROM\n",
 					header.magic);
 			return -EINVAL;
 		}
 	}
+	debug("EEPROM: 0x%x - name:%.8s, - version: %.4s, - serial: %.12s\n",
+			header.magic, header.name, header.version, header.serial);
 
 	return 0;
 }
@@ -273,8 +295,9 @@ static void rtc32k_enable(void)
 	writel((1 << 3) | (1 << 6), &rtc->osc);
 }
 
-void am33xx_spl_board_init(void)
+void __attribute__((weak)) am33xx_spl_board_init(void)
 {
+	debug(">>spl:am33xx_spl_board_init()\n");
 	if (!strncmp("A335BONE", header.name, 8)) {
 		/* BeagleBone PMIC Code */
 		uchar pmic_status_reg;
@@ -412,6 +435,7 @@ void s_init(void)
 	gd = &gdata;
 
 	preloader_console_init();
+
 #endif
 
 	/* Initalize the board header */
@@ -468,14 +492,25 @@ void s_init(void)
 	am33xx_spl_board_init();
 #endif
 
+	debug("  +spl:config_ddr");
 	/* The following boards are known to use DDR3. */
+	/* TODO revert to original if test of */
 	if ((!strncmp("A335X_SK", header.name, HDR_NAME_LEN)) || 
 			(!strncmp("A33515BB", header.name, 8) &&
 			 strncmp("1.5", header.version, 3) <= 0) ||
-			 (CONFIG_MACH_TYPE == MACH_TYPE_PIA_AM335X))
+			 ((strncmp("A335BONE", header.name, HDR_NAME_LEN)) && /* TODO rm */
+			 (CONFIG_MACH_TYPE == MACH_TYPE_PIA_AM335X)))
+	{
+		debug("   Memory Type: DDR3\n");
 		config_ddr(EMIF_REG_SDRAM_TYPE_DDR3);
+	}
 	else
+	{
+		/* TODO remove after debug PIA_ON_BONE */
+		debug("   Memory Type: DDR2\n");
 		config_ddr(EMIF_REG_SDRAM_TYPE_DDR2);
+
+	}
 #endif
 }
 
@@ -576,7 +611,6 @@ int arch_misc_init(void)
 	return 0;
 }
 
-#if (CONFIG_MACH_TYPE != MACH_TYPE_PIA_AM335X)
 /*
  * Basic board specific setup.  Pinmux has been handled already.
  */
@@ -592,7 +626,6 @@ int board_init(void)
 
 	return 0;
 }
-#endif
 
 #if (defined(CONFIG_DRIVER_TI_CPSW) && !defined(CONFIG_SPL_BUILD)) || \
 	(defined(CONFIG_SPL_ETH_SUPPORT) && defined(CONFIG_SPL_BUILD))
@@ -616,6 +649,25 @@ static struct cpsw_slave_data cpsw_slaves[] = {
 	},
 };
 
+#if (CONFIG_MACH_TYPE == MACH_TYPE_PIA_AM335X)
+static struct cpsw_platform_data cpsw_data = {
+	.mdio_base		= AM335X_CPSW_MDIO_BASE,
+	.cpsw_base		= AM335X_CPSW_BASE,
+	.mdio_div		= 0xff,
+	.channels		= 8,
+	.cpdma_reg_ofs		= 0x800,
+	.slaves			= 1,
+	.slave_data		= cpsw_slaves,
+	.ale_reg_ofs		= 0xd00,
+	.ale_entries		= 1024,
+	.host_port_reg_ofs	= 0x208,
+	.hw_stats_reg_ofs	= 0x900,
+	.mac_control		= (1 << 5),
+	.control		= cpsw_control,
+	.host_port_num		= 1,
+	.version		= CPSW_CTRL_VERSION_2,
+};
+#else
 static struct cpsw_platform_data cpsw_data = {
 	.mdio_base		= AM335X_CPSW_MDIO_BASE,
 	.cpsw_base		= AM335X_CPSW_BASE,
@@ -634,6 +686,7 @@ static struct cpsw_platform_data cpsw_data = {
 	.version		= CPSW_CTRL_VERSION_2,
 };
 #endif
+#endif
 
 #if defined(CONFIG_DRIVER_TI_CPSW) || \
 	(defined(CONFIG_USB_ETHER) && defined(CONFIG_MUSB_GADGET))
@@ -643,6 +696,8 @@ int board_eth_init(bd_t *bis)
 	uint8_t mac_addr[6];
 	uint32_t mac_hi, mac_lo;
 
+	debug("board_eth_init()\n");
+
 	/* try reading mac address from efuse */
 	mac_lo = readl(&cdev->macid0l);
 	mac_hi = readl(&cdev->macid0h);
@@ -675,11 +730,13 @@ int board_eth_init(bd_t *bis)
 		}
 	}
 
-	if (board_is_bone()) {
+	if (board_is_bone() || board_is_pia()) {
+		debug("enable MII\n");
 		writel(MII_MODE_ENABLE, &cdev->miisel);
 		cpsw_slaves[0].phy_if = cpsw_slaves[1].phy_if =
 				PHY_INTERFACE_MODE_MII;
 	} else {
+		debug("enable RGMII\n");
 		writel(RGMII_MODE_ENABLE, &cdev->miisel);
 		cpsw_slaves[0].phy_if = cpsw_slaves[1].phy_if =
 				PHY_INTERFACE_MODE_RGMII;
diff --git a/arch/arm/cpu/armv7/omap-common/boot-common.c b/arch/arm/cpu/armv7/omap-common/boot-common.c
index 2a639a1..04567b6 100644
--- a/arch/arm/cpu/armv7/omap-common/boot-common.c
+++ b/arch/arm/cpu/armv7/omap-common/boot-common.c
@@ -52,16 +52,20 @@ u32 spl_boot_mode(void)
 
 void spl_board_init(void)
 {
+	debug(">>spl:spl_board_init()\n");
 #ifdef CONFIG_SPL_NAND_SUPPORT
+	debug("  +spl:gpmc_init()\n");
 	gpmc_init();
 #endif
 #ifdef CONFIG_AM33XX
+	debug("  +spl:am33xx_spl_board_init()\n");
 	am33xx_spl_board_init();
 #endif
 }
 
 int board_mmc_init(bd_t *bis)
 {
+	debug(">>spl:board_mmc_init()\n");
 	switch (spl_boot_device()) {
 	case BOOT_DEVICE_MMC1:
 		omap_mmc_init(0, 0, 0);
diff --git a/board/ti/am335x/mux.c b/board/ti/am335x/mux.c
index ee1ec22..bb93281 100644
--- a/board/ti/am335x/mux.c
+++ b/board/ti/am335x/mux.c
@@ -490,6 +490,7 @@ static unsigned short detect_daughter_board_profile(void)
 
 void enable_board_pin_mux(struct am335x_baseboard_id *header)
 {
+	debug(">>am335x:enable_board_pin_mux()\n");
 	/* Do board-specific muxes. */
 	if (!strncmp(header->name, "A335BONE", HDR_NAME_LEN)) {
 		/* Beaglebone pinmux */
diff --git a/board/ti/am335xpia/Makefile b/board/ti/am335xpia/Makefile
index 6d1d434..9d6c2a0 100644
--- a/board/ti/am335xpia/Makefile
+++ b/board/ti/am335xpia/Makefile
@@ -18,7 +18,8 @@ include $(TOPDIR)/config.mk
 
 LIB	= $(obj)lib$(BOARD).o
 
-COBJS	:= pia.o ../am335x/mux.o
+#COBJS	:= pia.o ../am335x/mux.o
+COBJS	:= pia.o mux.o
 
 SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
 OBJS	:= $(addprefix $(obj),$(COBJS))
diff --git a/board/ti/am335xpia/mux.c b/board/ti/am335xpia/mux.c
index 9fcfe63..2775930 100644
--- a/board/ti/am335xpia/mux.c
+++ b/board/ti/am335xpia/mux.c
@@ -14,10 +14,12 @@
  * GNU General Public License for more details.
  */
 
-#include <config.h>
-#include <asm/arch/common_def.h>
+#include <common.h>
+#include <asm/arch/sys_proto.h>
 #include <asm/arch/hardware.h>
 #include <asm/io.h>
+#include <asm/gpio.h>
+#include <i2c.h>
 
 #define MUX_CFG(value, offset)	\
 	__raw_writel(value, (CTRL_BASE + offset));
@@ -29,7 +31,13 @@
 #define P_DOWN (0x0 << 4) /* Pull DOWN Selection */
 #define P_EN   (0x0 << 3) /* Pull enabled */
 #define P_DIS   (0x1 << 3) /* Pull up disabled */
-//#define MODE(val)	val	/* used for Readability */
+
+#define RXACTIVE (0x1 << 5)
+#define PULLUP_EN	(0x1 << 4) /* Pull UP Selection */
+#define PULLUDEN	(0x0 << 3) /* Pull up enabled */
+#define PULLUDDIS	(0x1 << 3) /* Pull up disabled */
+#define MODE(val)	val	/* used for Readability */
+
 /* mux modes */
 #define M0 0
 #define M1 1
@@ -264,12 +272,78 @@ struct module_pin_mux {
 				(PAD_CTRL_BASE))->x)
 
 static struct module_pin_mux uart0_pin_mux[] = {
-	{OFFSET(uart0_rxd), (M0 | P_UP | IEN)},	/* UART0_RXD */
-	{OFFSET(uart0_txd), (M0 | PEN)},		/* UART0_TXD */
+	{OFFSET(uart0_rxd), (M0 | P_UP | IEN)},  /* UART0_RXD */
+	{OFFSET(uart0_txd), (M0 | P_UP | P_EN)}, /* UART0_TXD */
+	{-1},
+};
+
+static struct module_pin_mux mii1_pin_mux[] = {
+	{OFFSET(mii1_rxerr), MODE(0) | IEN},	/* MII1_RXERR */
+	{OFFSET(mii1_txen), MODE(0)},			/* MII1_TXEN */
+	{OFFSET(mii1_rxdv), MODE(0) | IEN},	/* MII1_RXDV */
+	{OFFSET(mii1_txd3), MODE(0)},			/* MII1_TXD3 */
+	{OFFSET(mii1_txd2), MODE(0)},			/* MII1_TXD2 */
+	{OFFSET(mii1_txd1), MODE(0)},			/* MII1_TXD1 */
+	{OFFSET(mii1_txd0), MODE(0)},			/* MII1_TXD0 */
+	{OFFSET(mii1_txclk), MODE(0) | IEN},	/* MII1_TXCLK */
+	{OFFSET(mii1_rxclk), MODE(0) | IEN},	/* MII1_RXCLK */
+	{OFFSET(mii1_rxd3), MODE(0) | IEN},	/* MII1_RXD3 */
+	{OFFSET(mii1_rxd2), MODE(0) | IEN},	/* MII1_RXD2 */
+	{OFFSET(mii1_rxd1), MODE(0) | IEN},	/* MII1_RXD1 */
+	{OFFSET(mii1_rxd0), MODE(0) | IEN},	/* MII1_RXD0 */
+	{OFFSET(mdio_data), MODE(0) | IEN | PULLUP_EN}, /* MDIO_DATA */
+	{OFFSET(mdio_clk), MODE(0) | P_DOWN | P_EN},	/* MDIO_CLK */
+	{-1},
+};
+static struct module_pin_mux rgmii2_pin_mux[] = {
+	{OFFSET(gpmc_a0), MODE(1)},             /* RGMII2_TCTL / TXEN */
+	{OFFSET(gpmc_a1), MODE(1) | IEN},       /* RGMII2_RCTL / RXDV */
+	{OFFSET(gpmc_a2), MODE(1)},             /* RGMII2_TXD3 */
+	{OFFSET(gpmc_a3), MODE(1)},             /* RGMII2_TXD2 */
+	{OFFSET(gpmc_a4), MODE(1)},             /* RGMII2_TXD1 */
+	{OFFSET(gpmc_a5), MODE(1)},             /* RGMII2_TXD0 */
+	{OFFSET(gpmc_a6), MODE(1)},             /* RGMII2_TCLK */
+	{OFFSET(gpmc_a7), MODE(1) | IEN},       /* RGMII2_RCLK */
+	{OFFSET(gpmc_a8), MODE(1) | IEN},       /* RGMII2_RXD3 */
+	{OFFSET(gpmc_a9), MODE(1) | IEN},       /* RGMII2_RXD2 */
+	{OFFSET(gpmc_a10), MODE(1) | IEN},      /* RGMII2_RXD1 */
+	{OFFSET(gpmc_a11), MODE(1) | IEN},      /* RGMII2_RXD0 */
+	{OFFSET(mdio_data),MODE(0) | IEN | P_UP},/* MDIO_DATA */
+	{OFFSET(mdio_clk), MODE(0) | P_UP},     /* MDIO_CLK */
+//----
+	{OFFSET(gpmc_a0), MODE(1)},			/* RGMII2_TXEN */
+	{OFFSET(mii1_rxdv), MODE(0) | IEN},	/* MII1_RXDV */
+	{OFFSET(mii1_txd3), MODE(0)},			/* MII1_TXD3 */
+	{OFFSET(mii1_txd2), MODE(0)},			/* MII1_TXD2 */
+	{OFFSET(mii1_txd1), MODE(0)},			/* MII1_TXD1 */
+	{OFFSET(mii1_txd0), MODE(0)},			/* MII1_TXD0 */
+	{OFFSET(mii1_txclk), MODE(0) | IEN},	/* MII1_TXCLK */
+	{OFFSET(mii1_rxclk), MODE(0) | IEN},	/* MII1_RXCLK */
+	{OFFSET(mii1_rxd3), MODE(0) | IEN},	/* MII1_RXD3 */
+	{OFFSET(mii1_rxd2), MODE(0) | IEN},	/* MII1_RXD2 */
+	{OFFSET(mii1_rxd1), MODE(0) | IEN},	/* MII1_RXD1 */
+	{OFFSET(mii1_rxd0), MODE(0) | IEN},	/* MII1_RXD0 */
+	{OFFSET(mdio_data), MODE(0) | IEN | PULLUP_EN}, /* MDIO_DATA */
+	{OFFSET(mdio_clk), MODE(0) | PULLUP_EN},	/* MDIO_CLK */
 	{-1},
 };
 
 #ifdef CONFIG_MMC
+#ifndef PIA_ON_BONE
+/* configuration for KM_E2 */
+static struct module_pin_mux mmc0_pin_mux[] = {
+	{OFFSET(mmc0_dat3), (MODE(0) | IEN | PULLUP_EN)},	/* MMC0_DAT3 */
+	{OFFSET(mmc0_dat2), (MODE(0) | IEN | PULLUP_EN)},	/* MMC0_DAT2 */
+	{OFFSET(mmc0_dat1), (MODE(0) | IEN | PULLUP_EN)},	/* MMC0_DAT1 */
+	{OFFSET(mmc0_dat0), (MODE(0) | IEN | PULLUP_EN)},	/* MMC0_DAT0 */
+	{OFFSET(mmc0_clk),  (MODE(0) | IEN | PULLUP_EN)},	/* MMC0_CLK */
+	{OFFSET(mmc0_cmd),  (MODE(0) | IEN | PULLUP_EN)},	/* MMC0_CMD */
+	{OFFSET(mii1_txd2), (MODE(7) | IEN | PULLUP_EN)},	/* MMC0_CD */
+	{OFFSET(mii1_txclk), (MODE(7) | IEN | PULLUP_EN)},  /* MMC0_WP */
+	{-1},
+};
+#else
+/* configuration for Beaglebone */
 static struct module_pin_mux mmc0_pin_mux[] = {
 	{OFFSET(mmc0_dat3), (M0 | IEN | P_UP)},	/* MMC0_DAT3 */
 	{OFFSET(mmc0_dat2), (M0 | IEN | P_UP)},	/* MMC0_DAT2 */
@@ -277,20 +351,38 @@ static struct module_pin_mux mmc0_pin_mux[] = {
 	{OFFSET(mmc0_dat0), (M0 | IEN | P_UP)},	/* MMC0_DAT0 */
 	{OFFSET(mmc0_clk), (M0 | IEN | P_UP)},	/* MMC0_CLK */
 	{OFFSET(mmc0_cmd), (M0 | IEN | P_UP)},	/* MMC0_CMD */
-	{OFFSET(mcasp0_aclkr), (M4 | IEN)},		/* MMC0_WP */
 	{OFFSET(spi0_cs1), (M5 | IEN | P_UP)},	/* MMC0_CD */
 	{-1},
 };
+#endif /* PIA_ON_BONE */
 #endif
 
 static struct module_pin_mux i2c0_pin_mux[] = {
 	{OFFSET(i2c0_sda), (M0 | IEN |
-			PEN | SLEWCTRL)}, /* I2C_DATA */
+			P_UP | P_EN | SLEWCTRL)}, /* I2C_DATA */
 	{OFFSET(i2c0_scl), (M0 | IEN |
-			PEN | SLEWCTRL)}, /* I2C_SCLK */
+			P_UP | P_EN | SLEWCTRL)}, /* I2C_SCLK */
+	{-1},
+};
+
+static struct module_pin_mux i2c1_pin_mux[] = {
+	{OFFSET(uart0_ctsn), (MODE(3) | IEN |
+			P_UP | P_EN | SLEWCTRL)},	/* I2C_DATA */
+	{OFFSET(uart0_rtsn), (MODE(3) | IEN |
+			P_UP | P_EN | SLEWCTRL)},	/* I2C_SCLK */
 	{-1},
 };
 
+static struct module_pin_mux e2_supervisor_pin_mux[] = {
+	{OFFSET(lcd_data3), (M7 | P_DOWN)}, /* FlipFlop Clock 2_09 */
+	{OFFSET(gpmc_ad14), (M7 | IEN | P_DOWN | P_EN)}, /* WD_RESET 1_14 */
+	{OFFSET(mii1_col),  (M7 | IEN | P_DOWN | P_EN)}, /* PB_RESET 3_00 */
+	/* SET0 = HIGH, SET1 = HIGH, SET2 = LOW default off for Watchdog */
+	{OFFSET(lcd_vsync), (M7 | IEN | P_UP | P_EN)},   /* WD_SET1  2_22 */
+	{OFFSET(lcd_hsync), (M7 | IEN | P_DOWN | P_EN)},   /* WD_SET2  2_23 */
+	{OFFSET(lcd_ac_bias_en), (M7 | IEN | P_UP | P_EN)},   /* 24V_Fail  2_25 */
+};
+
 /*
  * Configure the pin mux for the module
  */
@@ -307,17 +399,59 @@ static void configure_module_pin_mux(struct module_pin_mux *mod_pin_mux)
 
 void enable_uart0_pin_mux(void)
 {
+	debug(">>pia:enable_uart0_pin_mux()\n");
 	configure_module_pin_mux(uart0_pin_mux);
 }
 
 #ifdef CONFIG_MMC
 void enable_mmc0_pin_mux(void)
 {
+	debug(">>pia:enable_mmc0_pin_mux()\n");
 	configure_module_pin_mux(mmc0_pin_mux);
 }
 #endif
 
 void enable_i2c0_pin_mux(void)
 {
+	debug(">>pia:enable_i2c0_pin_mux()\n");
 	configure_module_pin_mux(i2c0_pin_mux);
 }
+
+static void init_pia_gpios(void)
+{
+	debug(">>pia:init_pia_gpios()\n");
+#if defined(CONFIG_MMC) && defined(CONFIG_MMC_CD_GPIO)
+	gpio_request(CONFIG_MMC_CD_GPIO, "mmc0_cd");
+	gpio_direction_input(CONFIG_MMC_CD_GPIO);
+	debug("MMC CD: %d\n", gpio_get_value(CONFIG_MMC_CD_GPIO));
+#endif
+	/* Supervisor */
+	gpio_request(CONFIG_E2_PB_RESET_GPIO, "pb_reset");
+	gpio_direction_input(CONFIG_E2_PB_RESET_GPIO);
+	gpio_request(CONFIG_E2_WD_RESET_GPIO, "wd_reset");
+	gpio_direction_input(CONFIG_E2_WD_RESET_GPIO);
+	/* reset clock for supervisor flip flops */
+	gpio_request(CONFIG_E2_FF_CLOCK_GPIO, "ff_clock");
+	gpio_direction_output(CONFIG_E2_FF_CLOCK_GPIO, 0);
+
+	/* Watchdog config, both high = WD disabled */
+	gpio_request(CONFIG_E2_WD_SET1_GPIO, "wd_set1");
+	gpio_direction_output(CONFIG_E2_WD_SET1_GPIO, 1);
+	gpio_request(CONFIG_E2_WD_SET2_GPIO, "wd_set2");
+	gpio_direction_output(CONFIG_E2_WD_SET2_GPIO, 1);
+	gpio_request(CONFIG_E2_24V_FAIL_GPIO, "fail_24v");
+	gpio_direction_input(CONFIG_E2_24V_FAIL_GPIO);
+}
+
+void enable_board_pin_mux(struct am335x_baseboard_id *header)
+{
+	debug(">>pia:enable_board_pin_mux()\n");
+	/* Beaglebone pinmux */
+	configure_module_pin_mux(i2c1_pin_mux);
+	configure_module_pin_mux(mii1_pin_mux);
+	configure_module_pin_mux(mmc0_pin_mux);
+	configure_module_pin_mux(e2_supervisor_pin_mux);
+	// TODO use eeprom header spec
+	/* There is no hook for additional GPIO initialization */
+	init_pia_gpios();
+}
diff --git a/board/ti/am335xpia/pia.c b/board/ti/am335xpia/pia.c
index 4e1db22..d90c2c7 100644
--- a/board/ti/am335xpia/pia.c
+++ b/board/ti/am335xpia/pia.c
@@ -17,8 +17,8 @@
 #include <asm/arch/cpu.h>
 #include <asm/arch/hardware.h>
 #include <asm/arch/sys_proto.h>
+#include <asm/gpio.h>
 #include <serial.h>
-#include <i2c.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -26,16 +26,453 @@ DECLARE_GLOBAL_DATA_PTR;
 #define UART_CLK_RUNNING_MASK	0x1
 #define UART_SMART_IDLE_EN	(0x1 << 0x3)
 
+#ifdef CONFIG_SPL_BUILD
+#ifdef PIA_TESTING
+#undef PIA_TESTING
+#endif
+#endif
+
+#include <errno.h>
+#include <i2c.h>
+#include <mmc.h>
+#include <phy.h>
+
+#define PIA_RX8801_BUS 		1
+#define PIA_RX8801_ADDRESS	0x32
+#define PIA_TPS65910_CTRL_BUS 0
+#define PIA_TPS65910_CTRL_ADDRESS 0x2D
+#define PIA_TPS65910_SMART_ADDRESS 0x2D
+
+#define TC(t) \
+	t = ((t & 0x0f) + (10 *(t >> 4 && 0xf)))
+
+static int init_rtc_rx8801(void)
+{
+	u8 regval;
+
+	/* RTC EX-8801 */
+	puts("Initializing RTC (clearing error flags)\n");
+	i2c_set_bus_num(PIA_RX8801_BUS);
+	if (i2c_probe(PIA_RX8801_ADDRESS)) {
+		puts(" FAIL: Could not probe RTC device\n");
+		return -ENODEV;
+	}
+
+	/* clear RESET */
+	regval = 0x40; /* 2s temp compensation, reset off */
+	if (i2c_write(PIA_RX8801_ADDRESS, 0x0f, 1, &regval, 1)) {
+		puts(" Couldn't write RTC control register\n");
+		return -EIO;
+	}
+
+	/* clear error flags, they are undefined on first start */
+	regval = 0x00; /* clear all interrupt + error flags */
+	if (i2c_write(PIA_RX8801_ADDRESS, 0x0e, 1, &regval, 1)) {
+		puts(" Couldn't clear RTC flag register\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static int init_tps65910(void)
+{
+	u8 regval;
+
+	/* RTC on TPS65910 */
+	puts("Initializing TPS RTC (clearing flags and starting RTC)\n");
+	i2c_set_bus_num(0);
+	if (i2c_probe(PIA_TPS65910_CTRL_ADDRESS)) {
+		puts(" FAIL: Could not probe RTC device\n");
+		return -ENODEV;
+	}
+
+	/* start clock */
+	regval = 0x01; /* 24 hour, direct reg access, rtc running */
+	if (i2c_write(PIA_TPS65910_CTRL_ADDRESS, 0x10, 1, &regval, 1)) {
+		puts(" Couldn't write RTC CONTROL register\n");
+		return -EIO;
+	}
+
+	/* clear powerup and alarm flags */
+	regval = 0xC0;
+	if (i2c_write(PIA_TPS65910_CTRL_ADDRESS, 0x11, 1, &regval, 1)) {
+		puts(" Couldn't write RTC STATUS register\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+extern struct am335x_baseboard_id header;
+
+int am33xx_first_start(void)
+{
+	int size, pos;
+	int to; /* 10 ms timeout */
+
+	/* EUI EEPROM */
+	/* init with default magic number, generic name and version info */
+	header.magic = 0xEE3355AA;
+#if (defined PIA_KM_E2_REV) && (PIA_KM_E2_REV == 1)
+	strncpy((char *)&header.name, "PIA335E2", 8);
+	strncpy((char *)&header.version, "0.01", 4);
+	strncpy((char *)&header.serial, "000000000000", 12);
+#else
+	strncpy((char *)&header.name, "PIA335__", 8);
+	strncpy((char *)&header.version, "0.00", 4);
+	strncpy((char *)&header.serial, "000000000000", 12);
+#endif
+	memset(&header.config, 0, 32);
+	puts("Missing magic number, assuming first start, init EEPROM.\n");
+	printf("Using MN:0x%x N:%.8s V:%.4s SN:%.12s\n",
+			header.magic, header.name, header.version, header.serial);
+	size = sizeof(header);
+	pos = 0;
+	do {
+		to = 10;
+		/* page size is 8 bytes */
+		do {
+			if (!i2c_write(CONFIG_SYS_I2C_EEPROM_ADDR, pos, 1,
+					&((uchar *)&header)[pos], 1)) {
+				to = 0;
+				puts("I2C: success\n");
+			} else {
+				udelay(1000);
+			}
+		} while (--to > 0);
+		/* wait to avoid NACK error spam */
+		udelay(5000);
+	} while (++pos < size);
+
+	init_rtc_rx8801();
+	init_tps65910();
+
+	return 0;
+}
+
+#ifndef CONFIG_SPL_BUILD
+
+/*
+ * Read header information from EEPROM into global structure.
+ */
+static int read_eeprom(void)
+{
+	debug(">>pia:read_eeprom()\n");
+	/* Check if baseboard eeprom is available */
+	if (i2c_probe(CONFIG_SYS_I2C_EEPROM_ADDR)) {
+		puts("Could not probe the EEPROM; something fundamentally "
+			"wrong on the I2C bus.\n");
+		return -ENODEV;
+	}
+
+	/*
+	 * read the eeprom using i2c again,
+	 * but use only a 1 byte address
+	 */
+	if (i2c_read(CONFIG_SYS_I2C_EEPROM_ADDR, 0, 1,
+			(uchar *)&header, sizeof(header))) {
+		puts("Could not read the EEPROM; something "
+				"fundamentally wrong on the I2C bus.\n");
+		return -EIO;
+	}
+
+	if (header.magic != 0xEE3355AA ||
+#if (defined PIA_KM_E2_REV) && (PIA_KM_E2_REV == 1)
+			(strncmp(&header.name[0], "PIA335E2", 8))) {
+#else
+		{
+#endif
+		printf("Incorrect magic number (0x%x) in EEPROM\n",
+				header.magic);
+		am33xx_first_start();
+	}
+	debug("EEPROM: 0x%x - name:%.8s, - version: %.4s, - serial: %.12s\n",
+			header.magic, header.name, header.version, header.serial);
+
+	return 0;
+}
+
+#ifdef PIA_TESTING
+
+static int test_rtc_tps(void)
+{
+	unsigned char sec, min, hr, day, mon, yr, fl;
+	int ec;
+	debug("CHECK TPS RTC TPS65910...\n");
+	i2c_set_bus_num(0);
+	if (i2c_probe(PIA_TPS65910_CTRL_ADDRESS)) {
+		puts(" FAIL: Could not probe TPS device\n");
+		return -ENODEV;
+	}
+	/* dummy reads neccessary */
+	ec = i2c_read(PIA_TPS65910_CTRL_ADDRESS, 0x10, 1, &fl, 1);
+	ec |= i2c_read(PIA_TPS65910_CTRL_ADDRESS, 0x10, 1, &fl, 1);
+	printf(" CtrlReg: 0x%02x\n", fl);
+	ec |= i2c_read(PIA_TPS65910_CTRL_ADDRESS, 0x11, 1, &fl, 1);
+	ec |= i2c_read(PIA_TPS65910_CTRL_ADDRESS, 0x11, 1, &fl, 1);
+	printf(" Status: 0x%02x\n", fl);
+	if ((fl & 0x02) == 0)
+		init_tps65910();
+
+	ec |= i2c_read(PIA_TPS65910_CTRL_ADDRESS, 0, 1, &sec, 1);
+	ec |= i2c_read(PIA_TPS65910_CTRL_ADDRESS, 1, 1, &min, 1);
+	ec |= i2c_read(PIA_TPS65910_CTRL_ADDRESS, 2, 1, &hr, 1);
+	ec |= i2c_read(PIA_TPS65910_CTRL_ADDRESS, 3, 1, &day, 1);
+	ec |= i2c_read(PIA_TPS65910_CTRL_ADDRESS, 4, 1, &mon, 1);
+	ec |= i2c_read(PIA_TPS65910_CTRL_ADDRESS, 5, 1, &yr, 1);
+
+	if (ec) {
+		puts("  FAIL: Unable to read TPS RTC register\n");
+		return -EIO;
+	}
+	debug("  Date: 20%02d-%02d-%02d\n", TC(yr), TC(mon), TC(day));
+	debug("  Time:   %02d:%02d:%02d\n", TC(hr), TC(min), TC(sec));
+
+	puts("TPS RTC: OK\n");
+
+	return 0;
+}
+
+static int test_rtc_rx8801(void)
+{
+	unsigned char sec, min, hr, day, mon, yr, fl;
+	int ec;
+	debug("CHECK RTC RX-8801...\n");
+	i2c_set_bus_num(PIA_RX8801_BUS);
+	if (i2c_probe(PIA_RX8801_ADDRESS)) {
+		puts(" FAIL: Could not probe RTC device\n");
+		return -ENODEV;
+	}
+	ec = i2c_read(PIA_RX8801_ADDRESS, 0x0e, 1, &fl, 1);
+	if (fl & 0x01) {
+		puts("  WARN: Voltage Drop Flag set. "
+				"Temp. compensation was stopped, BAT might be damaged!\n");
+	}
+	if (fl & 0x02) {
+		puts("  WARN: Voltage Low Flag set. "
+				"Data loss - RTC must be be re-initialized, check BAT!\n");
+	}
+
+	if (!(fl & 0x03)) {
+		puts("  Error Flags: OK\n");
+	} else {
+		puts("  Resetting RTC Flags\n");
+	}
+	ec = i2c_read(PIA_RX8801_ADDRESS, 0, 1, &sec, 1);
+	ec = i2c_read(PIA_RX8801_ADDRESS, 1, 1, &min, 1);
+	ec = i2c_read(PIA_RX8801_ADDRESS, 2, 1, &hr, 1);
+	ec = i2c_read(PIA_RX8801_ADDRESS, 4, 1, &day, 1);
+	ec = i2c_read(PIA_RX8801_ADDRESS, 5, 1, &mon, 1);
+	ec = i2c_read(PIA_RX8801_ADDRESS, 6, 1, &yr, 1);
+
+	if (ec) {
+		puts("  FAIL: Unable to read RTC register\n");
+		return -EIO;
+	}
+	debug("  Date: 20%02d-%02d-%02d\n", TC(yr), TC(mon), TC(day));
+	debug("  Time:   %02d:%02d:%02d\n", TC(hr), TC(min), TC(sec));
+
+	puts("RTC: OK\n");
+	return 0;
+}
+
+static int test_temp_sensor(void)
+{
+	/* TODO */
+	return 0;
+}
+
+static int test_supervisor(void)
+{
+	int pb, wd;
+	puts("CHECK RESET...\n");
+	pb = gpio_get_value(CONFIG_E2_PB_RESET_GPIO);
+	wd = gpio_get_value(CONFIG_E2_WD_RESET_GPIO);
+	puts(" last reset was: ");
+	if (wd == 0 && pb == 0) {
+		puts(" Cold Boot\n");
+		puts(" Enabling Watchdog, wait for RESET\n");
+		gpio_set_value(CONFIG_E2_WD_SET1_GPIO, 0); /* will reset in 300 ms */
+		mdelay(1000);
+	} else if (wd == 0) {
+		puts(" WatchDog Reset\n");
+	} else if (pb == 0) {
+		puts(" PushButton Reset\n");
+	} else {
+		puts(" None or Soft Reset\n");
+	}
+
+	puts(" Clearing RESET Flags\n");
+	gpio_set_value(CONFIG_E2_FF_CLOCK_GPIO, 1); /* reset flipflops */
+	mdelay(1);
+	gpio_set_value(CONFIG_E2_FF_CLOCK_GPIO, 0);
+
+	pb = gpio_get_value(CONFIG_E2_24V_FAIL_GPIO);
+	printf("24V_Fail: %s\n", (pb ? "HIGH" : "LOW"));
+
+	return 0;
+}
+
+static int test_pia(void)
+{
+	int rc = 0;
+
+	printf("\nRunning board tests on %.8s Rev%.4s\n\n",
+			header.name, header.version);
+	rc |= test_supervisor();
+	rc |= test_rtc_rx8801();
+	rc |= test_rtc_tps();
+	rc |= test_temp_sensor();
+
+	return rc;
+}
+
+#else
+static inline int test_pia(void) {
+	puts("Board tests disabled\n");
+	return 0;
+}
+#endif
+#endif
+
+int board_late_init()
+{
+	/* use this as testing function, ETH is not initialized here */
+	//i2c_se
+	debug("+pia:board_late_init()\n");
+
+	read_eeprom();
+
+	test_pia();
+	return 0;
+}
+
+int board_phy_config(struct phy_device *phydev)
+{
+	int reg, i;
+	debug("+pia:board_phy_config()\n");
+	phy_write(phydev, 30, 0, 0x175c);
+	reg = phy_read(phydev, 30, 0);
+	mdelay(5); /* min 2 ms */
+	debug(" master reset done:\n");
+	for (i = 0; i < 5; ++i) {
+		reg = phy_read(phydev, i, 0);
+		debug(" control %d:  0x%04x\n", i, reg);
+		reg = phy_read(phydev, 30, 1);
+		debug(" status  %d:  0x%04x\n", i, reg);
+	}
+
+	/* read IPC mode register */
+	phy_write(phydev, 29, 31, 0x175c);
+	reg = phy_read(phydev, 29, 31);
+	debug("  29:31 == 0x%04x\n", reg);
+
+	/* set port phy 100/FD */
+	phy_write(phydev, 4, 0, 0x2100);
+	/* enable force mode */
+	phy_write(phydev, 29, 22, 0x8420);
+	reg = phy_read(phydev, 29, 22);
+	debug("  force == 0x%04x\n", reg);
+
+	/* resetting ports (ports share regs 0 and 1 */
+	for (i = 0; i < 5; ++i) {
+		debug(" resettings ports...\n");
+		phy_write(phydev, i, MII_BMCR, BMCR_RESET);
+		reg = phy_read(phydev, i, MII_BMCR);
+		debug(" P%d control: 0x%04x\n", i, reg);
+	}
+	mdelay(2);
+	for (i = 0; i < 5; ++i) {
+		reg = phy_read(phydev, i, MII_BMSR);
+		debug(" P%d status: 0x%04x\n", i, reg);
+	}
+	reg = phy_read(phydev, 29, 22);
+	debug("  port reset done: 0x%04x 0x%04x\n",
+			phy_read(phydev, 0, 0), phy_read(phydev, 0, 1));
+
+	reg = phy_read(phydev, 31, 3);
+	debug("  mii0 mac mode 31:03: 0x%04x\n", reg);
+
+	reg = phy_read(phydev, 31, 5);
+	debug("  mii control   31:05: 0x%04x\n", reg);
+
+	reg = phy_read(phydev, 31, 6);
+	debug("  mii control2  31:06: 0x%04x\n", reg);
+
+	return 0;
+}
+
+
+#include "pmic.h"
+#include "asm/arch/clocks_am33xx.h"
+
+#define MPU     0
+#define CORE    1
+
+int voltage_update(unsigned int module, unsigned char vddx_op_vol_sel);
+/* override from cpu/armv7/am33xx/board.c */
+void am33xx_spl_board_init(void)
+{
+	debug(">>pia:am33xx_spl_board_init()\n");
+	uchar buf[4];
+	/*
+	 * TODO check
+	 * EVM PMIC code.  All boards currently want an MPU voltage
+	 * of 1.2625V and CORE voltage of 1.1375V to operate at
+	 * 720MHz.
+	 */
+	i2c_set_bus_num(0);
+	if (i2c_probe(PMIC_CTRL_I2C_ADDR))
+		return;
+
+	/* VDD1/2 voltage selection register access by control i/f */
+	if (i2c_read(PMIC_CTRL_I2C_ADDR, PMIC_DEVCTRL_REG, 1, buf, 1))
+		return;
+
+	debug("PMIC DEVCTRL: %02x\n", buf[0]);
+	buf[0] |= PMIC_DEVCTRL_REG_SR_CTL_I2C_SEL_CTL_I2C;
+	buf[0] |= 0x20; /* CK32K_CTRL internal 32k */
+	buf[0] &= (~0x40); /* enable RTC */
+
+	if (i2c_write(PMIC_CTRL_I2C_ADDR, PMIC_DEVCTRL_REG, 1, buf, 1))
+		return;
+
+	if (!voltage_update(MPU, PMIC_OP_REG_SEL_1_2_6) &&
+			!voltage_update(CORE, PMIC_OP_REG_SEL_1_1_3)) {
+		if (board_is_evm_15_or_later())
+			mpu_pll_config(MPUPLL_M_800);
+		else
+			mpu_pll_config(MPUPLL_M_720);
+	}
+}
+
+int board_mmc_getcd(struct mmc* mmc)
+{
+#ifdef CONFIG_MMC_CD_GPIO
+	return (1 ^ gpio_get_value(CONFIG_MMC_CD_GPIO));
+#else
+	return 1;
+#endif
+}
+
+
+/* TODO override weak definition from am33xx/board.c
+ * currently identical implementation */
+#if 0
 /*
  * Basic board specific setup
  */
 int board_init(void)
 {
 	enable_uart0_pin_mux();
+	debug(">>pia:board_init()\n");
 
 #ifdef CONFIG_I2C
 	enable_i2c0_pin_mux();
 	i2c_init(CONFIG_SYS_I2C_SPEED, CONFIG_SYS_I2C_SLAVE);
+	if (read_eeprom() < 0)
+		puts("Could not get board ID\n");
 #endif
 
 	gd->bd->bi_boot_params = PHYS_DRAM_1 + 0x100;
@@ -44,3 +481,4 @@ int board_init(void)
 
 	return 0;
 }
+#endif
diff --git a/board/ti/am335xpia/pmic.h b/board/ti/am335xpia/pmic.h
new file mode 100644
index 0000000..e258c44
--- /dev/null
+++ b/board/ti/am335xpia/pmic.h
@@ -0,0 +1,76 @@
+/*
+ * pmic.h
+ *
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+#ifndef PMIC_h
+#define PMIC_H
+
+/*
+ * The PMIC on this board is a TPS65910.
+ */
+
+#define PMIC_SR_I2C_ADDR		0x12
+#define PMIC_CTRL_I2C_ADDR		0x2D
+/* PMIC Register offsets */
+#define PMIC_VDD1_REG			0x21
+#define PMIC_VDD1_OP_REG		0x22
+#define PMIC_VDD2_REG			0x24
+#define PMIC_VDD2_OP_REG		0x25
+#define PMIC_DEVCTRL_REG		0x3f
+
+/* VDD2 & VDD1 control register (VDD2_REG & VDD1_REG) */
+#define PMIC_VGAIN_SEL_MASK		(0x3 << 6)
+#define PMIC_ILMAX_MASK			(0x1 << 5)
+#define PMIC_TSTEP_MASK			(0x7 << 2)
+#define PMIC_ST_MASK			(0x3)
+
+#define PMIC_REG_VGAIN_SEL_X1		(0x0 << 6)
+#define PMIC_REG_VGAIN_SEL_X1_0		(0x1 << 6)
+#define PMIC_REG_VGAIN_SEL_X3		(0x2 << 6)
+#define PMIC_REG_VGAIN_SEL_X4		(0x3 << 6)
+
+#define PMIC_REG_ILMAX_1_0_A		(0x0 << 5)
+#define PMIC_REG_ILMAX_1_5_A		(0x1 << 5)
+
+#define PMIC_REG_TSTEP_			(0x0 << 2)
+#define PMIC_REG_TSTEP_12_5		(0x1 << 2)
+#define PMIC_REG_TSTEP_9_4		(0x2 << 2)
+#define PMIC_REG_TSTEP_7_5		(0x3 << 2)
+#define PMIC_REG_TSTEP_6_25		(0x4 << 2)
+#define PMIC_REG_TSTEP_4_7		(0x5 << 2)
+#define PMIC_REG_TSTEP_3_12		(0x6 << 2)
+#define PMIC_REG_TSTEP_2_5		(0x7 << 2)
+
+#define PMIC_REG_ST_OFF			(0x0)
+#define PMIC_REG_ST_ON_HI_POW		(0x1)
+#define PMIC_REG_ST_OFF_1		(0x2)
+#define PMIC_REG_ST_ON_LOW_POW		(0x3)
+
+
+/* VDD2 & VDD1 voltage selection register. (VDD2_OP_REG & VDD1_OP_REG) */
+#define PMIC_OP_REG_SEL				(0x7F)
+
+#define PMIC_OP_REG_CMD_MASK			(0x1 << 7)
+#define PMIC_OP_REG_CMD_OP			(0x0 << 7)
+#define PMIC_OP_REG_CMD_SR			(0x1 << 7)
+
+#define PMIC_OP_REG_SEL_MASK			(0x7F)
+#define PMIC_OP_REG_SEL_1_1_3			(0x2E)	/* 1.1375 V */
+#define PMIC_OP_REG_SEL_1_2_6			(0x38)	/* 1.2625 V */
+
+/* Device control register . (DEVCTRL_REG) */
+#define PMIC_DEVCTRL_REG_SR_CTL_I2C_MASK	(0x1 << 4)
+#define PMIC_DEVCTRL_REG_SR_CTL_I2C_SEL_SR_I2C	(0x0 << 4)
+#define PMIC_DEVCTRL_REG_SR_CTL_I2C_SEL_CTL_I2C	(0x1 << 4)
+
+#endif
diff --git a/common/spl/spl.c b/common/spl/spl.c
index b2df397..ab287bd 100644
--- a/common/spl/spl.c
+++ b/common/spl/spl.c
@@ -154,10 +154,11 @@ void board_init_r(gd_t *dummy1, ulong dummy2)
 	mem_malloc_init(CONFIG_SYS_SPL_MALLOC_START,
 			CONFIG_SYS_SPL_MALLOC_SIZE);
 #endif
-
+	debug("  +spl:timer_init()\n");
 	timer_init();
 
 #ifdef CONFIG_SPL_BOARD_INIT
+	debug("  +spl:spl_board_init()\n");
 	spl_board_init();
 #endif
 
diff --git a/drivers/mmc/omap_hsmmc.c b/drivers/mmc/omap_hsmmc.c
index afd9b30..1777687 100644
--- a/drivers/mmc/omap_hsmmc.c
+++ b/drivers/mmc/omap_hsmmc.c
@@ -544,6 +544,7 @@ int omap_mmc_init(int dev_index, uint host_caps_mask, uint f_max)
 {
 	struct mmc *mmc;
 
+	debug(">>omap_mmc_init()\n");
 	mmc = &hsmmc_dev[dev_index];
 
 	sprintf(mmc->name, "OMAP SD/MMC");
@@ -598,7 +599,9 @@ int omap_mmc_init(int dev_index, uint host_caps_mask, uint f_max)
 		mmc->b_max = 1;
 #endif
 
+	debug("  +mmc_register(%s)\n", mmc->name);
 	mmc_register(mmc);
+	debug("  -mmc_register(%s)\n", mmc->name);
 
 	return 0;
 }
diff --git a/drivers/mmc/spl_mmc.c b/drivers/mmc/spl_mmc.c
index 753c6a0..427a525 100644
--- a/drivers/mmc/spl_mmc.c
+++ b/drivers/mmc/spl_mmc.c
@@ -107,6 +107,7 @@ void spl_mmc_load_image(void)
 	int err;
 	u32 boot_mode;
 
+	debug(">>spl:spl_mmc_load_image()\n");
 	mmc_initialize(gd->bd);
 	/* We register only one device. So, the dev id is always 0 */
 	mmc = find_mmc_device(0);
@@ -115,6 +116,7 @@ void spl_mmc_load_image(void)
 		hang();
 	}
 
+	debug("  +mmc_init()\n");
 	err = mmc_init(mmc);
 	if (err) {
 		printf("spl: mmc init failed: err - %d\n", err);
diff --git a/drivers/usb/musb-new/musb_dsps.c b/drivers/usb/musb-new/musb_dsps.c
index 9a03917..20c4327 100644
--- a/drivers/usb/musb-new/musb_dsps.c
+++ b/drivers/usb/musb-new/musb_dsps.c
@@ -170,6 +170,8 @@ static void dsps_musb_enable(struct musb *musb)
 	void __iomem *reg_base = musb->ctrl_base;
 	u32 epmask, coremask;
 
+	debug("musb_dsps: enable %d %d %d\n",
+			musb->address, musb->board_mode, musb->is_host);
 	/* Workaround: setup IRQs through both register sets. */
 	epmask = ((musb->epmask & wrp->txep_mask) << wrp->txep_shift) |
 	       ((musb->epmask & wrp->rxep_mask) << wrp->rxep_shift);
@@ -433,6 +435,7 @@ static int dsps_musb_init(struct musb *musb)
 	u32 rev, val;
 	int status;
 
+	debug("musb_dsps: init\n");
 	/* mentor core register starts at offset of 0x400 from musb base */
 	musb->mregs += wrp->musb_core_offset;
 
@@ -500,6 +503,7 @@ static int dsps_musb_exit(struct musb *musb)
 		del_timer_sync(&glue->timer);
 #endif
 
+	debug("musb_dsps: exit\n");
 	/* Shutdown the on-chip PHY and its PLL. */
 	if (data->set_phy_power)
 		data->set_phy_power(0);
diff --git a/fs/fat/fat.c b/fs/fat/fat.c
index 80156c8..962ce2d 100644
--- a/fs/fat/fat.c
+++ b/fs/fat/fat.c
@@ -197,8 +197,10 @@ static __u32 get_fatent(fsdata *mydata, __u32 entry)
 		return ret;
 	}
 
+#if 0 /* TODO reenable after debug */
 	debug("FAT%d: entry: 0x%04x = %d, offset: 0x%04x = %d\n",
 	       mydata->fatsize, entry, entry, offset, offset);
+#endif
 
 	/* Read a new block of FAT entries into the cache. */
 	if (bufnum != mydata->fatbufnum) {
@@ -258,8 +260,10 @@ static __u32 get_fatent(fsdata *mydata, __u32 entry)
 		}
 		break;
 	}
+#if 0 /* TODO reenable after debug */
 	debug("FAT%d: ret: %08x, offset: %04x\n",
 	       mydata->fatsize, ret, offset);
+#endif
 
 	return ret;
 }
diff --git a/include/configs/am335x_pia.h b/include/configs/am335x_pia.h
index f6a2aab..5e43da8 100644
--- a/include/configs/am335x_pia.h
+++ b/include/configs/am335x_pia.h
@@ -18,6 +18,20 @@
 
 #define CONFIG_AM33XX
 
+/*#define PIA_ON_BONE*/
+#define PIA_DEBUG
+#define PIA_TESTING
+#define PIA_KM_E2_REV 1
+/* TODO only for dev */
+#ifdef PIA_DEBUG
+#define CONFIG_DISPLAY_CPUINFO
+#define DEBUG
+#ifdef DEBUG
+#endif /* DEBUG */
+#endif /* PIA_DEBUG */
+
+#define CONFIG_BOARD_LATE_INIT
+
 #include <asm/arch/cpu.h>
 #include <asm/arch/hardware.h>
 
@@ -29,7 +43,7 @@
 #define CONFIG_SYS_HUSH_PARSER		/* use "hush" command parser */
 #define CONFIG_SYS_PROMPT		"U-Boot# "
 #define CONFIG_SYS_NO_FLASH
-#define MACH_TYPE_PIA_AM335X		10001	/* FIXME sync with kernel! */
+#define MACH_TYPE_PIA_AM335X		10001	/* sync with kernel! */
 #define CONFIG_MACH_TYPE		MACH_TYPE_PIA_AM335X
 
 #define CONFIG_OF_LIBFDT
@@ -63,7 +77,7 @@
 	"optargs=\0" \
 	"mmcdev=0\0" \
 	"mmcroot=/dev/mmcblk0p2 ro\0" \
-	"mmcrootfstype=ext3 rootwait\0" \
+	"mmcrootfstype=ext4 rootwait\0" \
 	"nandroot=ubi0:rootfs rw ubi.mtd=7,2048\0" \
 	"nandrootfstype=ubifs rootwait=1\0" \
 	"nandsrcaddr=0x280000\0" \
@@ -78,7 +92,7 @@
 	"static_ip=${ipaddr}:${serverip}:${gatewayip}:${netmask}:${hostname}" \
 		"::off\0" \
 	"bootargs_defaults=setenv bootargs " \
-		"console=${console} " \
+		"console=${console} early_printk debug " \
 		"${optargs}\0" \
 	"mmcargs=run bootargs_defaults;" \
 		"setenv bootargs ${bootargs} " \
@@ -193,6 +207,7 @@
 #define CONFIG_MMC
 #define CONFIG_GENERIC_MMC
 #define CONFIG_OMAP_HSMMC
+#define CONFIG_MMC_CD_GPIO		(17 + (0 << 5))
 #define CONFIG_CMD_MMC
 #define CONFIG_DOS_PARTITION
 #define CONFIG_CMD_FAT
@@ -203,7 +218,7 @@
 #define CONFIG_SPI
 #define CONFIG_OMAP3_SPI
 #define CONFIG_MTD_DEVICE
-#if PIA
+#if 0
 #define CONFIG_SPI_FLASH
 #define CONFIG_SPI_FLASH_WINBOND
 #define CONFIG_CMD_SF
@@ -254,7 +269,10 @@
 #endif
 
 /* CPSW ethernet */
+#if 0 /* no ethernet boot required */
 #define CONFIG_CMD_NET
+#endif
+/* below only for testing, not really used */
 #define CONFIG_CMD_DHCP
 #define CONFIG_CMD_PING
 #define CONFIG_DRIVER_TI_CPSW
@@ -267,9 +285,15 @@
 #define CONFIG_BOOTP_SUBNETMASK
 #define CONFIG_NET_RETRY_COUNT         10
 #define CONFIG_NET_MULTI
+#if 0
 #define CONFIG_PHY_GIGE
+#endif
 #define CONFIG_PHYLIB
+#if 0
 #define CONFIG_PHY_SMSC
+#endif
+
+#define CONFIG_CMD_MII
 
  /* Physical Memory Map */
 #define CONFIG_NR_DRAM_BANKS		1		/*  1 bank of DRAM */
@@ -371,8 +395,10 @@
 #endif
 
 /* Core network SPL (USB and CPSW). */
+#if 0
 #define CONFIG_SPL_NET_SUPPORT
 #define CONFIG_SPL_NET_VCI_STRING	"AM335x U-Boot SPL"
+#endif
 
 /* USB (RNDIS) SPL */
 #ifdef CONFIG_USB_SPL
@@ -389,7 +415,7 @@
  */
 #ifndef CONFIG_USB_SPL
 /* CPSW SPL */
-#define CONFIG_SPL_ETH_SUPPORT
+/*#define CONFIG_SPL_ETH_SUPPORT*/
 #endif
 
 /* SD/MMC/eMMC */
@@ -401,8 +427,10 @@
 #define CONFIG_SPL_FAT_SUPPORT
 #define CONFIG_SPL_LIBDISK_SUPPORT
 
+#if 0
 /* Y-Modem. */
 #define CONFIG_SPL_YMODEM_SUPPORT
+#endif
 
 /* NAND */
 #define CONFIG_SPL_NAND_AM33XX_BCH
@@ -438,8 +466,10 @@
 #define CONFIG_USB_GADGET_DUALSPEED
 #define CONFIG_USB_GADGET_VBUS_DRAW	2
 #define CONFIG_MUSB_HOST
+#if 0 /* todo reanable */
 #define CONFIG_AM335X_USB0
 #define CONFIG_AM335X_USB0_MODE	MUSB_PERIPHERAL
+#endif
 #define CONFIG_AM335X_USB1
 #define CONFIG_AM335X_USB1_MODE MUSB_HOST
 
@@ -449,10 +479,12 @@
 #endif
 
 #ifdef CONFIG_MUSB_GADGET
+#if 0
 #define CONFIG_USB_ETHER
 #define CONFIG_USB_ETH_RNDIS
 #define CONFIG_USBNET_DEV_ADDR	"aa:bb:cc:00:11:33"
 #define CONFIG_USBNET_HOST_ADDR	"aa:bb:cc:00:11:44"
+#endif
 #define CONFIG_CMD_NET
 #define CONFIG_CMD_DHCP
 #define CONFIG_CMD_TFTP
@@ -490,6 +522,13 @@
 #endif
 #endif
 
+/* E2 settings */
+#define CONFIG_E2_FF_CLOCK_GPIO ((2 * 32) + 9)
+#define CONFIG_E2_24V_FAIL_GPIO ((2 * 32) + 25)
+#define CONFIG_E2_WD_RESET_GPIO ((1 * 32) + 14)
+#define CONFIG_E2_PB_RESET_GPIO ((3 * 32) + 0)
+#define CONFIG_E2_WD_SET1_GPIO  ((2 * 32) + 22)
+#define CONFIG_E2_WD_SET2_GPIO  ((2 * 32) + 23)
 /* TODO remove */
 #if 0
 /*
@@ -528,4 +567,8 @@
 #endif	/* NOR support */
 #endif
 
+#ifdef PIA_ON_BONE
+#undef CONFIG_SPL_NAND_SUPPORT
+#endif /* PIA_ON_BONE */
+
 #endif	/* ! __CONFIG_AM335X_PIA_H */
